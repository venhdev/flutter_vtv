// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_vtv/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:convert' as _i12;
import 'dart:typed_data' as _i14;

import 'package:connectivity_plus/connectivity_plus.dart' as _i9;
import 'package:connectivity_plus_platform_interface/connectivity_plus_platform_interface.dart'
    as _i10;
import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i4;
import 'package:flutter_vtv/core/notification/firebase_cloud_messaging_manager.dart'
    as _i11;
import 'package:flutter_vtv/features/auth/data/data_sources/auth_data_source.dart'
    as _i8;
import 'package:flutter_vtv/features/auth/domain/repositories/auth_repository.dart'
    as _i6;
import 'package:http/http.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i13;
import 'package:vtv_common/vtv_common.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDataResponse_1<T> extends _i1.SmartFake
    implements _i3.DataResponse<T> {
  _FakeDataResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSuccessResponse_2 extends _i1.SmartFake
    implements _i3.SuccessResponse {
  _FakeSuccessResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFlutterSecureStorage_3 extends _i1.SmartFake
    implements _i4.FlutterSecureStorage {
  _FakeFlutterSecureStorage_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_4 extends _i1.SmartFake implements _i5.Response {
  _FakeResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_5 extends _i1.SmartFake
    implements _i5.StreamedResponse {
  _FakeStreamedResponse_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i6.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i3.Failure, _i3.AuthEntity>> retrieveAuth() =>
      (super.noSuchMethod(
        Invocation.method(
          #retrieveAuth,
          [],
        ),
        returnValue: _i7.Future<_i2.Either<_i3.Failure, _i3.AuthEntity>>.value(
            _FakeEither_0<_i3.Failure, _i3.AuthEntity>(
          this,
          Invocation.method(
            #retrieveAuth,
            [],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i3.Failure, _i3.AuthEntity>>);

  @override
  _i7.Future<_i2.Either<_i3.ErrorResponse, _i3.DataResponse<_i3.AuthEntity>>>
      loginWithUsernameAndPassword(
    String? username,
    String? password,
  ) =>
          (super.noSuchMethod(
            Invocation.method(
              #loginWithUsernameAndPassword,
              [
                username,
                password,
              ],
            ),
            returnValue: _i7.Future<
                _i2.Either<_i3.ErrorResponse,
                    _i3.DataResponse<_i3.AuthEntity>>>.value(_FakeEither_0<
                _i3.ErrorResponse, _i3.DataResponse<_i3.AuthEntity>>(
              this,
              Invocation.method(
                #loginWithUsernameAndPassword,
                [
                  username,
                  password,
                ],
              ),
            )),
          ) as _i7.Future<
              _i2.Either<_i3.ErrorResponse, _i3.DataResponse<_i3.AuthEntity>>>);

  @override
  _i7.Future<_i2.Either<_i3.Failure, void>> cacheAuth(
          _i3.AuthEntity? authEntity) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheAuth,
          [authEntity],
        ),
        returnValue: _i7.Future<_i2.Either<_i3.Failure, void>>.value(
            _FakeEither_0<_i3.Failure, void>(
          this,
          Invocation.method(
            #cacheAuth,
            [authEntity],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i3.Failure, void>>);

  @override
  _i7.Future<_i2.Either<_i3.ErrorResponse, _i3.SuccessResponse>> changePassword(
    String? oldPassword,
    String? newPassword,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #changePassword,
          [
            oldPassword,
            newPassword,
          ],
        ),
        returnValue: _i7
            .Future<_i2.Either<_i3.ErrorResponse, _i3.SuccessResponse>>.value(
            _FakeEither_0<_i3.ErrorResponse, _i3.SuccessResponse>(
          this,
          Invocation.method(
            #changePassword,
            [
              oldPassword,
              newPassword,
            ],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i3.ErrorResponse, _i3.SuccessResponse>>);

  @override
  _i7.Future<
          _i2.Either<_i3.ErrorResponse, _i3.DataResponse<_i3.UserInfoEntity>>>
      editUserProfile(_i3.UserInfoEntity? newInfo) => (super.noSuchMethod(
            Invocation.method(
              #editUserProfile,
              [newInfo],
            ),
            returnValue: _i7.Future<
                _i2.Either<_i3.ErrorResponse,
                    _i3.DataResponse<_i3.UserInfoEntity>>>.value(_FakeEither_0<
                _i3.ErrorResponse, _i3.DataResponse<_i3.UserInfoEntity>>(
              this,
              Invocation.method(
                #editUserProfile,
                [newInfo],
              ),
            )),
          ) as _i7.Future<
              _i2.Either<_i3.ErrorResponse,
                  _i3.DataResponse<_i3.UserInfoEntity>>>);

  @override
  _i7.Future<_i2.Either<_i3.ErrorResponse, _i3.SuccessResponse>> logout(
          String? refreshToken) =>
      (super.noSuchMethod(
        Invocation.method(
          #logout,
          [refreshToken],
        ),
        returnValue: _i7
            .Future<_i2.Either<_i3.ErrorResponse, _i3.SuccessResponse>>.value(
            _FakeEither_0<_i3.ErrorResponse, _i3.SuccessResponse>(
          this,
          Invocation.method(
            #logout,
            [refreshToken],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i3.ErrorResponse, _i3.SuccessResponse>>);

  @override
  _i7.Future<_i2.Either<_i3.Failure, void>> deleteAuth() => (super.noSuchMethod(
        Invocation.method(
          #deleteAuth,
          [],
        ),
        returnValue: _i7.Future<_i2.Either<_i3.Failure, void>>.value(
            _FakeEither_0<_i3.Failure, void>(
          this,
          Invocation.method(
            #deleteAuth,
            [],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i3.Failure, void>>);

  @override
  _i7.Future<_i2.Either<_i3.ErrorResponse, _i3.SuccessResponse>> register(
          _i3.RegisterParams? registerParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [registerParams],
        ),
        returnValue: _i7
            .Future<_i2.Either<_i3.ErrorResponse, _i3.SuccessResponse>>.value(
            _FakeEither_0<_i3.ErrorResponse, _i3.SuccessResponse>(
          this,
          Invocation.method(
            #register,
            [registerParams],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i3.ErrorResponse, _i3.SuccessResponse>>);

  @override
  _i7.Future<_i2.Either<_i3.Failure, bool>> isExpiredToken(
          String? accessToken) =>
      (super.noSuchMethod(
        Invocation.method(
          #isExpiredToken,
          [accessToken],
        ),
        returnValue: _i7.Future<_i2.Either<_i3.Failure, bool>>.value(
            _FakeEither_0<_i3.Failure, bool>(
          this,
          Invocation.method(
            #isExpiredToken,
            [accessToken],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i3.Failure, bool>>);

  @override
  _i7.Future<_i2.Either<_i3.ErrorResponse, _i3.DataResponse<String>>>
      getNewAccessToken() => (super.noSuchMethod(
            Invocation.method(
              #getNewAccessToken,
              [],
            ),
            returnValue: _i7.Future<
                    _i2
                    .Either<_i3.ErrorResponse, _i3.DataResponse<String>>>.value(
                _FakeEither_0<_i3.ErrorResponse, _i3.DataResponse<String>>(
              this,
              Invocation.method(
                #getNewAccessToken,
                [],
              ),
            )),
          ) as _i7
              .Future<_i2.Either<_i3.ErrorResponse, _i3.DataResponse<String>>>);

  @override
  _i7.Future<_i2.Either<_i3.ErrorResponse, _i3.SuccessResponse>>
      sendOTPForResetPassword(String? username) => (super.noSuchMethod(
            Invocation.method(
              #sendOTPForResetPassword,
              [username],
            ),
            returnValue: _i7.Future<
                    _i2.Either<_i3.ErrorResponse, _i3.SuccessResponse>>.value(
                _FakeEither_0<_i3.ErrorResponse, _i3.SuccessResponse>(
              this,
              Invocation.method(
                #sendOTPForResetPassword,
                [username],
              ),
            )),
          ) as _i7.Future<_i2.Either<_i3.ErrorResponse, _i3.SuccessResponse>>);

  @override
  _i7.Future<_i2.Either<_i3.ErrorResponse, _i3.SuccessResponse>>
      resetPasswordViaOTP(
    String? username,
    String? otpCode,
    String? newPassword,
  ) =>
          (super.noSuchMethod(
            Invocation.method(
              #resetPasswordViaOTP,
              [
                username,
                otpCode,
                newPassword,
              ],
            ),
            returnValue: _i7.Future<
                    _i2.Either<_i3.ErrorResponse, _i3.SuccessResponse>>.value(
                _FakeEither_0<_i3.ErrorResponse, _i3.SuccessResponse>(
              this,
              Invocation.method(
                #resetPasswordViaOTP,
                [
                  username,
                  otpCode,
                  newPassword,
                ],
              ),
            )),
          ) as _i7.Future<_i2.Either<_i3.ErrorResponse, _i3.SuccessResponse>>);
}

/// A class which mocks [AuthDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthDataSource extends _i1.Mock implements _i8.AuthDataSource {
  MockAuthDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i3.DataResponse<_i3.AuthModel>> loginWithUsernameAndPassword(
    String? username,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginWithUsernameAndPassword,
          [
            username,
            password,
          ],
        ),
        returnValue: _i7.Future<_i3.DataResponse<_i3.AuthModel>>.value(
            _FakeDataResponse_1<_i3.AuthModel>(
          this,
          Invocation.method(
            #loginWithUsernameAndPassword,
            [
              username,
              password,
            ],
          ),
        )),
      ) as _i7.Future<_i3.DataResponse<_i3.AuthModel>>);

  @override
  _i7.Future<_i3.SuccessResponse> register(_i3.RegisterParams? registerDTO) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [registerDTO],
        ),
        returnValue:
            _i7.Future<_i3.SuccessResponse>.value(_FakeSuccessResponse_2(
          this,
          Invocation.method(
            #register,
            [registerDTO],
          ),
        )),
      ) as _i7.Future<_i3.SuccessResponse>);

  @override
  _i7.Future<_i3.SuccessResponse> logoutAndRevokeRefreshToken(
          String? refreshToken) =>
      (super.noSuchMethod(
        Invocation.method(
          #logoutAndRevokeRefreshToken,
          [refreshToken],
        ),
        returnValue:
            _i7.Future<_i3.SuccessResponse>.value(_FakeSuccessResponse_2(
          this,
          Invocation.method(
            #logoutAndRevokeRefreshToken,
            [refreshToken],
          ),
        )),
      ) as _i7.Future<_i3.SuccessResponse>);

  @override
  _i7.Future<_i3.DataResponse<String>> getNewAccessToken(
          String? refreshToken) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNewAccessToken,
          [refreshToken],
        ),
        returnValue: _i7.Future<_i3.DataResponse<String>>.value(
            _FakeDataResponse_1<String>(
          this,
          Invocation.method(
            #getNewAccessToken,
            [refreshToken],
          ),
        )),
      ) as _i7.Future<_i3.DataResponse<String>>);

  @override
  _i7.Future<_i3.DataResponse<_i3.AuthModel>> getUserProfile() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserProfile,
          [],
        ),
        returnValue: _i7.Future<_i3.DataResponse<_i3.AuthModel>>.value(
            _FakeDataResponse_1<_i3.AuthModel>(
          this,
          Invocation.method(
            #getUserProfile,
            [],
          ),
        )),
      ) as _i7.Future<_i3.DataResponse<_i3.AuthModel>>);

  @override
  _i7.Future<_i3.DataResponse<_i3.UserInfoModel>> editUserProfile(
          {required _i3.UserInfoModel? newInfo}) =>
      (super.noSuchMethod(
        Invocation.method(
          #editUserProfile,
          [],
          {#newInfo: newInfo},
        ),
        returnValue: _i7.Future<_i3.DataResponse<_i3.UserInfoModel>>.value(
            _FakeDataResponse_1<_i3.UserInfoModel>(
          this,
          Invocation.method(
            #editUserProfile,
            [],
            {#newInfo: newInfo},
          ),
        )),
      ) as _i7.Future<_i3.DataResponse<_i3.UserInfoModel>>);

  @override
  _i7.Future<_i3.SuccessResponse> sendOTPForResetPasswordViaUsername(
          String? username) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendOTPForResetPasswordViaUsername,
          [username],
        ),
        returnValue:
            _i7.Future<_i3.SuccessResponse>.value(_FakeSuccessResponse_2(
          this,
          Invocation.method(
            #sendOTPForResetPasswordViaUsername,
            [username],
          ),
        )),
      ) as _i7.Future<_i3.SuccessResponse>);

  @override
  _i7.Future<_i3.SuccessResponse> resetPassword({
    required String? username,
    required String? otp,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #resetPassword,
          [],
          {
            #username: username,
            #otp: otp,
            #newPassword: newPassword,
          },
        ),
        returnValue:
            _i7.Future<_i3.SuccessResponse>.value(_FakeSuccessResponse_2(
          this,
          Invocation.method(
            #resetPassword,
            [],
            {
              #username: username,
              #otp: otp,
              #newPassword: newPassword,
            },
          ),
        )),
      ) as _i7.Future<_i3.SuccessResponse>);

  @override
  _i7.Future<_i3.SuccessResponse> changePassword({
    required String? username,
    required String? oldPassword,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #changePassword,
          [],
          {
            #username: username,
            #oldPassword: oldPassword,
            #newPassword: newPassword,
          },
        ),
        returnValue:
            _i7.Future<_i3.SuccessResponse>.value(_FakeSuccessResponse_2(
          this,
          Invocation.method(
            #changePassword,
            [],
            {
              #username: username,
              #oldPassword: oldPassword,
              #newPassword: newPassword,
            },
          ),
        )),
      ) as _i7.Future<_i3.SuccessResponse>);
}

/// A class which mocks [SecureStorageHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockSecureStorageHelper extends _i1.Mock
    implements _i3.SecureStorageHelper {
  MockSecureStorageHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.FlutterSecureStorage get I => (super.noSuchMethod(
        Invocation.getter(#I),
        returnValue: _FakeFlutterSecureStorage_3(
          this,
          Invocation.getter(#I),
        ),
      ) as _i4.FlutterSecureStorage);

  @override
  _i7.Future<bool> get isLogin => (super.noSuchMethod(
        Invocation.getter(#isLogin),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<List<String>?> get roles => (super.noSuchMethod(
        Invocation.getter(#roles),
        returnValue: _i7.Future<List<String>?>.value(),
      ) as _i7.Future<List<String>?>);

  @override
  _i7.Future<String?> get accessToken => (super.noSuchMethod(
        Invocation.getter(#accessToken),
        returnValue: _i7.Future<String?>.value(),
      ) as _i7.Future<String?>);

  @override
  _i7.Future<String?> get username => (super.noSuchMethod(
        Invocation.getter(#username),
        returnValue: _i7.Future<String?>.value(),
      ) as _i7.Future<String?>);

  @override
  _i7.Future<_i3.AuthEntity?> readAuth() => (super.noSuchMethod(
        Invocation.method(
          #readAuth,
          [],
        ),
        returnValue: _i7.Future<_i3.AuthEntity?>.value(),
      ) as _i7.Future<_i3.AuthEntity?>);

  @override
  _i7.Future<void> cacheAuth(String? jsonData) => (super.noSuchMethod(
        Invocation.method(
          #cacheAuth,
          [jsonData],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> updateUserInfo(_i3.UserInfoEntity? newInfo) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserInfo,
          [newInfo],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteAuth() => (super.noSuchMethod(
        Invocation.method(
          #deleteAuth,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteAll() => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i9.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Stream<List<_i10.ConnectivityResult>> get onConnectivityChanged =>
      (super.noSuchMethod(
        Invocation.getter(#onConnectivityChanged),
        returnValue: _i7.Stream<List<_i10.ConnectivityResult>>.empty(),
      ) as _i7.Stream<List<_i10.ConnectivityResult>>);

  @override
  _i7.Future<List<_i10.ConnectivityResult>> checkConnectivity() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkConnectivity,
          [],
        ),
        returnValue: _i7.Future<List<_i10.ConnectivityResult>>.value(
            <_i10.ConnectivityResult>[]),
      ) as _i7.Future<List<_i10.ConnectivityResult>>);
}

/// A class which mocks [FirebaseCloudMessagingManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseCloudMessagingManager extends _i1.Mock
    implements _i11.FirebaseCloudMessagingManager {
  MockFirebaseCloudMessagingManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set currentFCMToken(String? _currentFCMToken) => super.noSuchMethod(
        Invocation.setter(
          #currentFCMToken,
          _currentFCMToken,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i5.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i5.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i12.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i12.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i12.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i12.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<String>.value(_i13.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<String>);

  @override
  _i7.Future<_i14.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i14.Uint8List>.value(_i14.Uint8List(0)),
      ) as _i7.Future<_i14.Uint8List>);

  @override
  _i7.Future<_i5.StreamedResponse> send(_i5.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i7.Future<_i5.StreamedResponse>.value(_FakeStreamedResponse_5(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i7.Future<_i5.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
